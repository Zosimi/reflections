What happens when you initialize a repository? Why do you need to do it?
	I create a GIT repository. I need to do this to be able to start making commits and to start tracking them.


How is the staging area different from the working directory and the repository? What value do you think it offers?
	It is a temporary area where you group the files you want to be included in the same commit. The working directory on the other hand includes all files in your local repository.


How can you use the staging area to make sure you have one commit per logical change?
	I can compare it with the previous commit as well as with my current working directory.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
	If I for example want to try an new feature that I am not sure will work or if I want to make any other experimental changes or for example change the language of the content. If it then turns out my changes did not work, I can easily go back to another working version.


How do the diagrams help you visualize the branch structure?
	It helps me see what commits are reachable or unreachable.


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
	New code that has been added to a branch will be added to the new merged branch. Older code that has been removed will also be removed from the new merged branch.
	Code that is present in both branches will be present in the  new merged branch


What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
	GIT
		PROS: It saves time when merging together two pieces of code
		CONS: You don't always know which version of a code should be transferred to the new merged code.

	MANUAL
		PROS: You have full control of the merge.
		CONS: It takes longer and you may miss something that you added/removed in one of the files. May require rewriting of code.





